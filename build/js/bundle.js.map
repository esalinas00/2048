{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/main.js","src/js/board.js","src/js/handler.js","src/js/painter.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var Board = require('./board');\nvar Painter = require('./painter');\nvar Handler = require('./handler');\n\nvar MyPainter = new Painter();\ndocument.addEventListener('newCell',function(e){\n  console.log('New Cell event triggered');\n  MyPainter.paintCell(e.detail);\n},false);\nvar putato = new Board(4);\ndocument.addEventListener('redraw',function(e){\n  console.log('Redraw event triggered');\n  MyPainter.redraw(e.detail.board);\n},false);\nvar MyHandler = new Handler(putato.slide.bind(putato));","function Board(size){\n\tthis.leBoard = [];\n\tthis.boardWitdh = size;\n\tthis.maxCells  = size * size;\n\n\t//Initialize the board\n\tfunction initBoard () {\n\t\tvar i = 0, j = 0;\n\t\tfor(; i < this.boardWitdh; i+=1 ){\n\t\t\tthis.leBoard.push([]);\n\t\t\tfor(j = 0; j < this.boardWitdh; j+=1 ){\n\t\t\t\tthis.leBoard[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tthis.randomCell();\n\t\tthis.randomCell();\n\t}\t\n\tinitBoard.call(this);\n}\n\nBoard.prototype.randomCell = function(){\n\tvar event;\n\tvar randomNumber;\n\tvar i = 0, j = 0;\n\tvar freeCell, pi, pj, randomValue;\n\tvar valueMappings = [2,2,2,2,4];\n\tvar flatBoard = [];\n\t\n\t//Traverse Array\n\tfor(; i < this.boardWitdh; i+=1 ){\n\t\tfor(j = 0; j < this.boardWitdh; j+=1 ){\n\t\t\tif(this.leBoard[i][j] == 0){\n\t\t\t\tflatBoard.push(i*this.boardWitdh+j);\n\t\t\t}\n\t\t}\n\t}\n\tif(!flatBoard.length){\n\t\tconsole.log(\"Gameover\");\n\t\tevent = new CustomEvent('newCell', { 'detail': {gameover: true} });\n\t\tdocument.dispatchEvent(event);\n\t\treturn {gameover:true};\n\t}\n\tconsole.log(flatBoard);\t\n\trandomNumber = Math.floor((Math.random() * flatBoard.length));\n\t//convert randomNumber to coordinates\n\tfreeCell = flatBoard[randomNumber];\n\tpi = Math.floor(freeCell/this.boardWitdh);\n\tpj = freeCell % this.boardWitdh;\n\n\tvar randomValue = valueMappings[Math.floor((Math.random() * valueMappings.length))];\n\tthis.leBoard[pi][pj] = randomValue;\n\tthis.logBoard();\n\tevent = new CustomEvent('newCell', { 'detail': { cellNumber: freeCell, cellValue: randomValue, gameover: false} });\n\tdocument.dispatchEvent(event);\n\treturn { cellNumber: freeCell, cellValue: randomValue, gameover: false};\n};\n\nBoard.prototype.logBoard = function(){\n\tvar toLog = \"\";\n\tthis.leBoard.forEach(function(row, indexX, owner){\n\t\trow.forEach(function(item,indexY,owner){\n\t\t\ttoLog += item+\" \";\t\n\t\t});\n\t\ttoLog +=\"\\n\";\n\t});\n\tconsole.log(toLog);\n};\n\n//i stands for y-axis\n//j stands for x-axis\nBoard.prototype.slide = function(direction){\n\tconsole.log(\"Direction: \"+direction);\n\tvar y = 0, x = 0;\n\tvar lastPos = 99;\n\tvar event;\n\tvar changed = false;\n\t//lets start with slide up;\n\tvar emptyCells = 0;\n\tif(direction === \"up\"){\n\t\t//console.log(\"we entered the for\");\n\t\tfor(;y<this.leBoard.length;y+=1){\n\t\t\tx=0;\n\t\t\t//console.log(\"y-cycle: \",y,this.leBoard[y]);\n\t\t\tfor(;x<this.leBoard.length;x+=1){\n\t\t\t\t//console.log(\"x-cycle: \",x);\n\t\t\t\tlastPos = 99;\n\t\t\t\tif(y == 0 ) {\n\t\t\t\t\t//do nothing\n\t\t\t\t\tif(this.leBoard[y][x] === 0) {\n\t\t\t\t\t\temptyCells += 1;\n\t\t\t\t\t}\n\t\t\t\t} else if(this.leBoard[y][x] !== 0){\n\t\t\t\t\t//console.log(\"we are in a filled cell \",\"y: \",y,\"x: \",x);\n\t\t\t\t\tfor(var k = y - 1 ; k >= 0; k-=1){\n\t\t\t\t\t\tif(this.leBoard[k][x] === 0){\n\t\t\t\t\t\t\tlastPos = k;\n\t\t\t\t\t\t}else if(this.leBoard[k][x] === this.leBoard[y][x]){\n\t\t\t\t\t\t\tlastPos = k;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//empy cells in other ys\n\t\t\t\t\temptyCells += 1;\n\t\t\t\t}\n\n\t\t\t\tif(lastPos !== 99){\n\t\t\t\t\tthis.leBoard[lastPos][x] += this.leBoard[y][x];\n\t\t\t\t\tthis.leBoard[y][x] = 0;\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}else if(direction === \"down\"){\n\t\t//console.log(\"DOWN, we entered the for\");\n\t\ty = this.leBoard.length -1 ;\n\t\tfor(;y >= 0; y-=1){\n\t\t\tx=0;\n\t\t\tconsole.log(\"y-cycle: \",y,this.leBoard[y]);\n\t\t\tfor(;x<this.leBoard.length;x+=1){\n\t\t\t\t//console.log(\"x-cycle: \",x);\n\t\t\t\tlastPos = 99;\n\t\t\t\tif(y == 3 ) {\n\t\t\t\t\t//do nothing\n\t\t\t\t\tif(this.leBoard[y][x] === 0) {\n\t\t\t\t\t\temptyCells += 1;\n\t\t\t\t\t}\n\t\t\t\t} else if(this.leBoard[y][x] !== 0){\n\t\t\t\t\t//console.log(\"we are in a filled cell \",\"y: \",y,\"x: \",x);\n\t\t\t\t\tfor(var k = y + 1 ; k < this.leBoard.length; k+=1){\n\t\t\t\t\t\tif(this.leBoard[k][x] === 0){\n\t\t\t\t\t\t\tlastPos = k;\n\t\t\t\t\t\t}else if(this.leBoard[k][x] === this.leBoard[y][x]){\n\t\t\t\t\t\t\tlastPos = k;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//empy cells in other ys\n\t\t\t\t\temptyCells += 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(lastPos !== 99){\n\t\t\t\t\tthis.leBoard[lastPos][x] += this.leBoard[y][x];\n\t\t\t\t\tthis.leBoard[y][x] = 0;\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\n\t//this.logBoard();\n\tif(changed){\n\t\tevent = new CustomEvent('redraw', { 'detail': {board: this.leBoard} });\n\t\tdocument.dispatchEvent(event);\n\t\tthis.randomCell(); \n\t}\n\t//console.log(\"EMPTY CELLS: \",emptyCells);\n\t\n};\nmodule.exports = Board;","//event handler\nfunction EventHanlder(cb){\n\n  function keyHandler(e){\n    switch(e.which){\n      case 38:\n      case 87:\n        //console.log(\"Up action\");\n        //code here\n        cb(\"up\");\n        break;\n      case 39:\n      case 68:\n        //console.log(\"Right action\");\n        //code here\n        cb(\"right\");\n        break;\n      case 40:\n      case 83:\n        //console.log(\"Down action\");\n        //code here\n        cb(\"down\");\n        break;\n      case 37:\n      case 65:\n        //console.log(\"Left action\");\n        //code here\n        cb(\"left\");\n        break;\n      default:\n        break;   \n    }\n  }\n  document.addEventListener('keydown',keyHandler,false);\n}\nmodule.exports = EventHanlder;","function Painter(){\n  var canvas = document.getElementById('game'); \n  var ctx;\n  var blockSize = 40;\n  var separation = 2;\n  var colorMappings = {\n    '0' : \"#C0C0C0\",\n    '2': 'rgb(238, 228, 218)',\n    '4':'rgb(237, 224, 200)',\n    '8':'rgb(242, 177, 121)',\n    '16':'rgb(245, 149, 99)',\n    '32':'rgb(246, 124, 95)',\n    '64':'rgb(246, 94, 59)',\n    '128':'rgb(237, 207, 114)',\n    '256':'rgb(237, 204, 97)',\n    '512':'rgb(237, 200, 80)',\n    '1024':'rgb(237, 197, 63)',\n    '2048':'rgb(237, 194, 46)'\n  };\n\n  if(canvas.getContext){\n  \tctx = canvas.getContext('2d');\n\n  \tfor (var i=0;i<4;i++){\n    \tfor (var j=0;j<4;j++){\n        ctx.beginPath();\n        ctx.fillStyle = \"#C0C0C0\";\n        //ctx.fillRect((40+separation)*i,(40+separation)*j,blockSize,blockSize);\n        roundedRect(ctx,(40+separation)*i,(40+separation)*j,blockSize,blockSize,4);\n    \t}\n  \t}\n  }\n\n  //opts.cellNumber , opts.cellValue, opts.gameover\n  this.paintCell = function(opts){\n    if (!opts.gameover){\n      var i = Math.floor(opts.cellNumber/4);\n      var j = opts.cellNumber%4;\n\n      ctx.beginPath(); \n      ctx.fillStyle = colorMappings[opts.cellValue.toString()];\n      roundedRect(ctx,(40+separation)*j,(40+separation)*i,blockSize,blockSize,4);\n\n      if(opts.cellValue <= 4) {\n        ctx.fillStyle = \"rgb(119, 110, 101)\";\n      } else {\n        ctx.fillStyle = \"rgb(249, 246, 242)\";  \n      }\n\n      if(Math.floor(opts.cellValue/1000)){\n         ctx.font = \"18px serif\";\n      } else if(Math.floor(opts.cellValue/100)){\n        ctx.font = \"22px serif\";\n      } else if(Math.floor(opts.cellValue/10)){\n        ctx.font = \"28px serif\";\n      } else {\n        ctx.font = \"34px serif\";\n      }\n      \n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      //ctx.fillText(opts.cellValue.toString() == 0 ? \"\":opts.cellValue.toString(), (40+separation)*j + 20, (40+separation)*i + 20);\n      ctx.fillText(opts.cellValue || \"\" , (40+separation)*j + 20, (40+separation)*i + 20);\n    }\n  }\n\n  this.redraw = function(board){\n    var i = 0,j;\n    for(;i < board.length; i+=1){\n      j = 0;\n      for(;j < board.length; j+=1){\n        var cellNumber = i*board.length + j;\n        this.paintCell({cellNumber:cellNumber,cellValue:board[i][j]});\n      } \n    }\n  }\n}\n\nmodule.exports = Painter;\n\nfunction roundedRect(ctx,x,y,width,height,radius){\n  ctx.beginPath();\n  ctx.moveTo(x,y+radius);\n  ctx.lineTo(x,y+height-radius);\n  ctx.quadraticCurveTo(x,y+height,x+radius,y+height);\n  ctx.lineTo(x+width-radius,y+height);\n  ctx.quadraticCurveTo(x+width,y+height,x+width,y+height-radius);\n  ctx.lineTo(x+width,y+radius);\n  ctx.quadraticCurveTo(x+width,y,x+width-radius,y);\n  ctx.lineTo(x+radius,y);\n  ctx.quadraticCurveTo(x,y,x,y+radius);\n  ctx.fill();\n}"]}